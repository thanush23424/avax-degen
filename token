// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract BiryaniToken is ERC20, Ownable, ERC20Burnable {
    event LogMessage(string message);
    event BiryaniRedeemed(address indexed player, uint256 amount, string productName);

    enum BiryaniType { Chicken, Mutton, Egg }

    mapping(BiryaniType => uint256) public biryaniRates;
    BiryaniType public recentlyRedeemedBiryani;

    constructor(address initialOwner) Ownable(initialOwner) ERC20("Biryani Token", "BIRYANI") {
        setPrices();
    }

    function setPrices() internal {
        biryaniRates[BiryaniType.Chicken] = 500;
        biryaniRates[BiryaniType.Mutton] = 1500;
        biryaniRates[BiryaniType.Egg] = 2500;
    }

    function mintTokens(address beneficiary, uint256 amount) external onlyOwner {
        _mint(beneficiary, amount);
    }

    function burnTokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT TOKENS!!");
        _burn(msg.sender, amount);
        emit LogMessage("Tokens burned successfully");
    }

    function transferTokens(address recipient, uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT TOKENS!!");
        _transfer(msg.sender, recipient, amount);
    }

    function redeemForBiryani(uint256 tokenAmount) external {
        if (biryaniRates[BiryaniType.Egg] <= tokenAmount) {
            recentlyRedeemedBiryani = BiryaniType.Egg;
        } else if (biryaniRates[BiryaniType.Mutton] <= tokenAmount) {
            recentlyRedeemedBiryani = BiryaniType.Mutton;
        } else if (biryaniRates[BiryaniType.Chicken] <= tokenAmount) {
            recentlyRedeemedBiryani = BiryaniType.Chicken;
        } else {
            revert("No biryani item can be redeemed with the specified token amount");
        }

        require(biryaniRates[recentlyRedeemedBiryani] > 0, "Invalid biryani type");
        require(balanceOf(msg.sender) >= biryaniRates[recentlyRedeemedBiryani], "INSUFFICIENT TOKENS!!");
        _burn(msg.sender, biryaniRates[recentlyRedeemedBiryani]);
        emit BiryaniRedeemed(msg.sender, biryaniRates[recentlyRedeemedBiryani], getBiryaniTypeName(recentlyRedeemedBiryani));
        emit LogMessage("Biryani item redeemed successfully");
    }

    function showRedeemedItem() external view returns (string memory) {
        return getBiryaniTypeName(recentlyRedeemedBiryani);
    }

    function getBiryaniTypeName(BiryaniType _type) internal pure returns (string memory) {
        if (_type == BiryaniType.Chicken) {
            return "Chicken Biryani";
        } else if (_type == BiryaniType.Mutton) {
            return "Mutton Biryani";
        } else if (_type == BiryaniType.Egg) {
            return "Egg Biryani";
        } else {
            revert("Invalid biryani type");
        }
    }
}
