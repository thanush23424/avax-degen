// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract EventToken is ERC20, Ownable {
    event LogMessage(string message);
    event TicketPurchased(address indexed account, string eventName, uint256 quantity);

    mapping(string => uint256) public ticketCosts;
    mapping(string => uint256) public ticketCounts;
    mapping(address => mapping(string => uint256)) private userTickets;

    constructor() ERC20("EventToken", "ETK") Ownable(msg.sender) {
        
        _mint(msg.sender, 0);

        ticketCosts["Concert"] = 1000;
        ticketCounts["Concert"] = 100;

        ticketCosts["Movie"] = 300;
        ticketCounts["Movie"] = 200;

        ticketCosts["Workshop"] = 500;
        ticketCounts["Workshop"] = 50;

        ticketCosts["Festival"] = 1500;
        ticketCounts["Festival"] = 25;
    }

    function mintTokens(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function burnTokens(uint256 amount) public {
        require(balanceOf(msg.sender) >= amount, "Not enough tokens to burn");
        _burn(msg.sender, amount);
        emit LogMessage("Tokens burned successfully");
    }

    function transferTokens(address recipient, uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Not enough tokens to transfer");
        _transfer(msg.sender, recipient, amount);
    }

    function redeemTickets(string memory eventName, uint256 quantity) external {
        require(bytes(eventName).length > 0, "Event name cannot be empty");
        require(quantity > 0, "Quantity must be greater than zero");

        uint256 totalPrice = ticketCosts[eventName] * quantity;
        require(balanceOf(msg.sender) >= totalPrice, "Insufficient funds for ticket redemption");
        require(ticketCounts[eventName] >= quantity, "Not enough tickets available for redemption");

        address user = msg.sender;

        _burn(user, totalPrice);
        ticketCounts[eventName] -= quantity;
        userTickets[user][eventName] += quantity;

        emit LogMessage("Tickets redeemed successfully");
    }

    function myTickets() external view returns (string[] memory eventNames, uint256[] memory quantities) {
        uint256 eventCount = 0;
        for (uint256 i = 0; i < 4; i++) {
            string memory eventName = i == 0 ? "Concert" : (i == 1 ? "Movie" : (i == 2 ? "Workshop" : "Festival"));
            if (userTickets[msg.sender][eventName] > 0) {
                eventCount++;
            }
        }

        eventNames = new string[](eventCount);
        quantities = new uint256[](eventCount);

        uint256 index = 0;
        for (uint256 i = 0; i < 4; i++) {
            string memory eventName = i == 0 ? "Concert" : (i == 1 ? "Movie" : (i == 2 ? "Workshop" : "Festival"));
            uint256 quantity = userTickets[msg.sender][eventName];
            if (quantity > 0) {
                eventNames[index] = eventName;
                quantities[index] = quantity;
                index++;
            }
        }
    }
}
